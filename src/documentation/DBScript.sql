-- MySQL Script generated by MySQL Workbench
-- Tue Nov  3 23:58:17 2020
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema PrimalEnterpriceDB
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `PrimalEnterpriceDB` ;

CREATE SCHEMA IF NOT EXISTS `PrimalEnterpriceDB` DEFAULT CHARACTER SET utf8 ;
USE `PrimalEnterpriceDB` ;

-- -----------------------------------------------------
-- Table `PrimalEnterpriceDB`.`activos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `PrimalEnterpriceDB`.`activos` ;

CREATE TABLE IF NOT EXISTS `PrimalEnterpriceDB`.`activos` (
  `act_id` INT NOT NULL AUTO_INCREMENT,
  `act_usuario` VARCHAR(25) NOT NULL,
  `act_nit` INT NOT NULL,
  `act_factura_id` INT NOT NULL,
  `act_estado` VARCHAR(25) NOT NULL,
  `act_nombre` VARCHAR(80) NOT NULL,
  `act_descripcion` VARCHAR(255) NULL,
  `act_marca` VARCHAR(45) NULL,
  PRIMARY KEY (`act_id`),
  INDEX `FK_Activo_Provee_Proveedor` (`act_nit` ASC) VISIBLE,
  INDEX `FK_Activo_Registro_Usuario` (`act_usuario` ASC) VISIBLE,
  INDEX `FK_Activo_Vende_Factura` (`act_factura_id` ASC) VISIBLE,
  UNIQUE INDEX `Nombre_UNIQUE` (`act_nombre` ASC) VISIBLE,
  CONSTRAINT `FK_Activo_Provee_Proveedor`
    FOREIGN KEY (`act_nit`)
    REFERENCES `PrimalEnterpriceDB`.`proveedores` (`pve_nit`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE,
  CONSTRAINT `FK_Activo_Registro_Usuario`
    FOREIGN KEY (`act_usuario`)
    REFERENCES `PrimalEnterpriceDB`.`usuarios` (`usr_usuario`)
    ON DELETE restrict
    ON UPDATE restrict,
  CONSTRAINT `FK_Activo_Vende_Factura`
    FOREIGN KEY (`act_factura_id`)
    REFERENCES `PrimalEnterpriceDB`.`facturas` (`fac_id`)
    ON DELETE restrict
    ON UPDATE restrict);


-- -----------------------------------------------------
-- Table `PrimalEnterpriceDB`.`factura_proveedor`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `PrimalEnterpriceDB`.`factura_proveedor` ;

CREATE TABLE IF NOT EXISTS `PrimalEnterpriceDB`.`factura_proveedor` (
  `fve_factura_id` INT NOT NULL,
  `fve_nit` INT NOT NULL,
  PRIMARY KEY (`fve_factura_id`, `fve_nit`),
  INDEX `FK_Factura_Registra_Proveedor` (`fve_nit` ASC) VISIBLE,
  CONSTRAINT `FK_Factura_Registra_Factura`
    FOREIGN KEY (`fve_factura_id`)
    REFERENCES `PrimalEnterpriceDB`.`facturas` (`fac_id`)
    ON DELETE restrict
    ON UPDATE restrict,
  CONSTRAINT `FK_Factura_Registra_Proveedor`
    FOREIGN KEY (`fve_nit`)
    REFERENCES `PrimalEnterpriceDB`.`proveedores` (`pve_nit`)
    ON DELETE restrict
    ON UPDATE restrict);


-- -----------------------------------------------------
-- Table `PrimalEnterpriceDB`.`facturas`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `PrimalEnterpriceDB`.`facturas` ;

CREATE TABLE IF NOT EXISTS `PrimalEnterpriceDB`.`facturas` (
  `fac_id` INT NOT NULL AUTO_INCREMENT,
  `fac_usuario` VARCHAR(25) NOT NULL,
  `fac_valor` DOUBLE NOT NULL,
  `fac_fecha` DATE NOT NULL,
  `fac_tipo` VARCHAR(20) NOT NULL,
  PRIMARY KEY (`fac_id`),
  INDEX `FK_Factura_Registra_Usuario` (`fac_usuario` ASC) VISIBLE,
  CONSTRAINT `FK_Factura_Registra_Usuario`
    FOREIGN KEY (`fac_usuario`)
    REFERENCES `PrimalEnterpriceDB`.`usuarios` (`usr_usuario`)
    ON DELETE restrict
    ON UPDATE restrict);


-- -----------------------------------------------------
-- Table `PrimalEnterpriceDB`.`produccion_producto`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `PrimalEnterpriceDB`.`produccion_producto` ;

CREATE TABLE IF NOT EXISTS `PrimalEnterpriceDB`.`produccion_producto` (
  `prp_produccion_id` INT NOT NULL,
  `prp_producto_id` INT NOT NULL,
  PRIMARY KEY (`prp_produccion_id`, `prp_producto_id`),
  INDEX `FK_Produccion_Pertenece_Producto` (`prp_producto_id` ASC) VISIBLE,
  CONSTRAINT `FK_Produccion_Pertenece_Produccion`
    FOREIGN KEY (`prp_produccion_id`)
    REFERENCES `PrimalEnterpriceDB`.`producciones` (`prd_id`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE,
  CONSTRAINT `FK_Produccion_Pertenece_Producto`
    FOREIGN KEY (`prp_producto_id`)
    REFERENCES `PrimalEnterpriceDB`.`productos` (`pru_id`)
    ON DELETE restrict
    ON UPDATE restrict);


-- -----------------------------------------------------
-- Table `PrimalEnterpriceDB`.`producciones`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `PrimalEnterpriceDB`.`producciones` ;

CREATE TABLE IF NOT EXISTS `PrimalEnterpriceDB`.`producciones` (
  `prd_id` INT NOT NULL AUTO_INCREMENT,
  `prd_usuario` VARCHAR(25) NOT NULL,
  `prd_estado` VARCHAR(25) NOT NULL,
  `prd_tipo` VARCHAR(20) NOT NULL,
  `prd_fecha_comienzo` DATE NULL DEFAULT NULL,
  `prd_fecha_finalizacion` DATE NULL DEFAULT NULL,
  PRIMARY KEY (`prd_id`),
  INDEX `FK_Produccion_Registra_Usuario` (`prd_usuario` ASC) VISIBLE,
  CONSTRAINT `FK_Produccion_Registra_Usuario`
    FOREIGN KEY (`prd_usuario`)
    REFERENCES `PrimalEnterpriceDB`.`usuarios` (`usr_usuario`)
    ON DELETE restrict
    ON UPDATE restrict);


-- -----------------------------------------------------
-- Table `PrimalEnterpriceDB`.`producto_factura`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `PrimalEnterpriceDB`.`producto_factura` ;

CREATE TABLE IF NOT EXISTS `PrimalEnterpriceDB`.`producto_factura` (
  `pfa_factura_id` INT NOT NULL,
  `pfa_producto_id` INT NOT NULL,
  PRIMARY KEY (`pfa_factura_id`, `pfa_producto_id`),
  INDEX `FK_Producto_Registra_Producto` (`pfa_producto_id` ASC) VISIBLE,
  CONSTRAINT `FK_Producto_Registra_Factura`
    FOREIGN KEY (`pfa_factura_id`)
    REFERENCES `PrimalEnterpriceDB`.`facturas` (`fac_id`)
    ON DELETE restrict
    ON UPDATE restrict,
  CONSTRAINT `FK_Producto_Registra_Producto`
    FOREIGN KEY (`pfa_producto_id`)
    REFERENCES `PrimalEnterpriceDB`.`productos` (`pru_id`)
    ON DELETE restrict
    ON UPDATE restrict);


-- -----------------------------------------------------
-- Table `PrimalEnterpriceDB`.`productos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `PrimalEnterpriceDB`.`productos` ;

CREATE TABLE IF NOT EXISTS `PrimalEnterpriceDB`.`productos` (
  `pru_id` INT NOT NULL AUTO_INCREMENT,
  `pru_usuario` VARCHAR(25) NOT NULL,
  `pru_nit` INT NOT NULL,
  `pru_marca` VARCHAR(80) NOT NULL,
  `pru_tipo` VARCHAR(20) NOT NULL,
  `pru_cantidad` INT NOT NULL DEFAULT 0,
  `pru_metodo_almacenamiento` VARCHAR(255) NOT NULL,
  `pru_lugar_almacenamiento` VARCHAR(255) NOT NULL,
  `pru_nombre` VARCHAR(80) NOT NULL,
  `pru_descripcion` VARCHAR(255) NOT NULL,
  `pru_fecha_caducidad` DATE NULL DEFAULT NULL,
  PRIMARY KEY (`pru_id`),
  INDEX `FK_Producto_Provee_Proveedor` (`pru_nit` ASC) VISIBLE,
  INDEX `FK_Producto_Registra_Usuario` (`pru_usuario` ASC) VISIBLE,
  CONSTRAINT `FK_Producto_Provee_Proveedor`
    FOREIGN KEY (`pru_nit`)
    REFERENCES `PrimalEnterpriceDB`.`proveedores` (`pve_nit`)
    ON DELETE restrict
    ON UPDATE restrict,
  CONSTRAINT `FK_Producto_Registra_Usuario`
    FOREIGN KEY (`pru_usuario`)
    REFERENCES `PrimalEnterpriceDB`.`usuarios` (`usr_usuario`)
    ON DELETE restrict
    ON UPDATE restrict);


-- -----------------------------------------------------
-- Table `PrimalEnterpriceDB`.`proveedores`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `PrimalEnterpriceDB`.`proveedores` ;

CREATE TABLE IF NOT EXISTS `PrimalEnterpriceDB`.`proveedores` (
  `pve_nit` INT NOT NULL,
  `pve_usuario` VARCHAR(25) NOT NULL,
  `pve_nombre` VARCHAR(80) NOT NULL,
  `pve_direccion` VARCHAR(100) NOT NULL,
  `pve_email` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`pve_nit`),
  INDEX `FK_Proveedor_Registra_Usuario` (`pve_usuario` ASC) VISIBLE,
  CONSTRAINT `FK_Proveedor_Registra_Usuario`
    FOREIGN KEY (`pve_usuario`)
    REFERENCES `PrimalEnterpriceDB`.`usuarios` (`usr_usuario`)
    ON DELETE restrict
    ON UPDATE restrict);


-- -----------------------------------------------------
-- Table `PrimalEnterpriceDB`.`telefonos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `PrimalEnterpriceDB`.`telefonos` ;

CREATE TABLE IF NOT EXISTS `PrimalEnterpriceDB`.`telefonos` (
  `tel_id` INT NOT NULL AUTO_INCREMENT,
  `tel_usuario` VARCHAR(25) NULL,
  `tel_proveedor` INT NULL,
  `tel_telefono` INT NOT NULL,
  PRIMARY KEY (`tel_id`),
  UNIQUE INDEX `tel_telefono_UNIQUE` (`tel_telefono` ASC) VISIBLE,
  INDEX `fk_telefonos_usuarios1_idx` (`tel_usuario` ASC) VISIBLE,
  INDEX `fk_telefonos_proveedores1_idx` (`tel_proveedor` ASC) VISIBLE,
  CONSTRAINT `fk_telefonos_usuarios1`
    FOREIGN KEY (`tel_usuario`)
    REFERENCES `PrimalEnterpriceDB`.`usuarios` (`usr_usuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_telefonos_proveedores1`
    FOREIGN KEY (`tel_proveedor`)
    REFERENCES `PrimalEnterpriceDB`.`proveedores` (`pve_nit`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `PrimalEnterpriceDB`.`usuarios`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `PrimalEnterpriceDB`.`usuarios` ;

CREATE TABLE IF NOT EXISTS `PrimalEnterpriceDB`.`usuarios` (
  `usr_usuario` VARCHAR(25) NOT NULL,
  `usr_rango` VARCHAR(40) NOT NULL,
  `usr_contrasena` VARCHAR(40) NOT NULL,
  `usr_email` VARCHAR(100) NOT NULL,
  `usr_nombre` VARCHAR(80) NOT NULL,
  `usr_direccion` VARCHAR(100) NULL,
  `usr_cedula` INT NULL,
  PRIMARY KEY (`usr_usuario`));

# J1$9P!a6
INSERT INTO `PrimalEnterpriceDB`.`usuarios` 
VALUE("Admin","admin","b69948501d89b5aff7726b649a27264bcd139dc1","None","Admin","None",0);

-- -----------------------------------------------------
-- procedure userList
-- -----------------------------------------------------

USE `PrimalEnterpriceDB`;
DROP procedure IF EXISTS `PrimalEnterpriceDB`.`userList`;

DELIMITER $$
USE `PrimalEnterpriceDB`$$
CREATE PROCEDURE userList(
	IN paramether VARCHAR(45),
    IN search VARCHAR(100)
)
BEGIN
	SELECT * FROM vw_getUsers WHERE CASE paramether
		WHEN 'cedula' THEN
			cedula = search
		WHEN 'telefono' THEN
			telefono = search
		WHEN 'email' THEN
			email = search
		WHEN 'dirección' THEN
			direccion = search
		WHEN 'rango' THEN
			rango = search
		WHEN 'nombre' THEN
			nombre = search
		WHEN 'usuario' THEN
			usuario = search
		ELSE
			usuario IS NOT NULL
		END;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure productList
-- -----------------------------------------------------

USE `PrimalEnterpriceDB`;
DROP procedure IF EXISTS `PrimalEnterpriceDB`.`productList`;

DELIMITER $$
USE `PrimalEnterpriceDB`$$
CREATE PROCEDURE productList(
	IN paramether VARCHAR(45),
    IN search VARCHAR(100)
)
BEGIN
	SELECT * FROM vw_getProducts WHERE CASE paramether
		WHEN 'nombre' THEN
			nombre LIKE CONCAT('%',search,'%')
		WHEN 'nombre_proveedor' THEN
			nombre_proveedor LIKE CONCAT('%',search,'%')
		WHEN 'marca' THEN
			marca LIKE CONCAT('%',search,'%')
		WHEN 'tipo' THEN
			tipo = search
		WHEN 'cantidad' THEN
			cantidad = search
		WHEN 'ubicacion' THEN
			ubicacion LIKE CONCAT('%',search,'%')
		WHEN 'nit' THEN
			nit = search
		ELSE
			id IS NOT NULL
		END;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure providerList
-- -----------------------------------------------------

USE `PrimalEnterpriceDB`;
DROP procedure IF EXISTS `PrimalEnterpriceDB`.`providerList`;

DELIMITER $$
USE `PrimalEnterpriceDB`$$
CREATE PROCEDURE providerList(
	IN paramether VARCHAR(45),
    IN search VARCHAR(100)
)
BEGIN
	SELECT * FROM vw_getProviders WHERE CASE paramether
		WHEN 'nombre' THEN
			nombre = search
		WHEN 'email' THEN
			email = search
		WHEN 'direccion' THEN
			direccion = search
		WHEN 'telefono' THEN
			telefono = search
		WHEN 'nit' THEN
			nit = search
		ELSE
			nit IS NOT NULL
		END;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure activesList
-- -----------------------------------------------------

USE `PrimalEnterpriceDB`;
DROP procedure IF EXISTS `PrimalEnterpriceDB`.`activesList`;

DELIMITER $$
USE `PrimalEnterpriceDB`$$
CREATE PROCEDURE activesList(
	IN paramether VARCHAR(45),
    IN search VARCHAR(100)
)
BEGIN
	SELECT nit, nombre, estado, marca, descripcion
    FROM vw_getActives WHERE CASE paramether
		WHEN 'nombre' THEN
			nombre LIKE CONCAT('%',search,'%')
		WHEN 'estado' THEN
			estado LIKE CONCAT('%',search,'%')
		WHEN 'nit' THEN
			nit = search
		WHEN 'marca' THEN
			marca LIKE CONCAT('%',search,'%')
		WHEN 'factura' THEN
			factura = search
		WHEN 'descripcion' THEN
			descripcion LIKE CONCAT('%',search,'%')
		ELSE
			id IS NOT NULL
		END;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure productionsList
-- -----------------------------------------------------

USE `PrimalEnterpriceDB`;
DROP procedure IF EXISTS `PrimalEnterpriceDB`.`productionsList`;

DELIMITER $$
USE `PrimalEnterpriceDB`$$
CREATE PROCEDURE productionsList(
	IN paramether VARCHAR(45),
    IN search VARCHAR(100)
)
BEGIN
	SELECT * FROM vw_getProductions WHERE CASE paramether
		WHEN 'estado' THEN
			estado = search
		WHEN 'fecha_comienzo' THEN
			fecha_comienzo = search
		WHEN 'fecha_finalizacion' THEN
			fecha_finalizacion = search
		WHEN 'tipo' THEN
			tipo = search
		ELSE
			id IS NOT NULL
		END;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure login
-- -----------------------------------------------------

USE `PrimalEnterpriceDB`;
DROP procedure IF EXISTS `PrimalEnterpriceDB`.`login`;

DELIMITER $$
USE `PrimalEnterpriceDB`$$
CREATE PROCEDURE login(
	in username varchar(45),
    in userPass varchar(45)
)
BEGIN
	DECLARE valor INT;
    DECLARE pass varchar(40);
    
    SELECT COUNT(*) INTO valor FROM vw_getUsers WHERE usuario = username;
    
	IF valor = 0 THEN
		SELECT 0 AS 'error';
	ELSEIF valor = 1 THEN
		select SHA1(userPass) INTO pass;
        
        IF (SELECT COUNT(*) FROM vw_getUsers WHERE usuario = username AND contrasena = pass) = 0 THEN
			select 1 AS 'error';
		ELSE
			SELECT 
            2 AS 'error',
            usuario,
            rango,
            contrasena,
            telefono,
            email,
            direccion,
            nombre
            FROM vw_getUsers WHERE usuario = username AND contrasena = pass;
        END IF;
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure insertUser
-- -----------------------------------------------------

USE `PrimalEnterpriceDB`;
DROP procedure IF EXISTS `PrimalEnterpriceDB`.`insertUser`;

DELIMITER $$
USE `PrimalEnterpriceDB`$$
CREATE PROCEDURE insertUser(
	IN nombre VARCHAR(80), 
	IN cedula int, 
	IN rango VARCHAR(40),
	IN contrasena VARCHAR(25),
	IN telefono int,
	IN email VARCHAR(100),
	IN direccion VARCHAR(100),
	IN usuario VARCHAR(25)
)
BEGIN
	DECLARE pass VARCHAR(40);
    INSERT INTO telefonos VALUES (NULL,usuario,NULL,telefono);
	SET pass = SHA1(contrasena);
    INSERT INTO usuarios VALUES (usuario,rango,contrasena,email,nombre,direccion,cedula);  
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure insertProvider
-- -----------------------------------------------------

USE `PrimalEnterpriceDB`;
DROP procedure IF EXISTS `PrimalEnterpriceDB`.`insertProvider`;

DELIMITER $$
USE `PrimalEnterpriceDB`$$
CREATE PROCEDURE insertProvider(
	IN nombre VARCHAR(80), 
	IN nit INT,
	IN telefono INT,
	IN email VARCHAR(100),
	IN direccion VARCHAR(100),
	IN usuario VARCHAR(25)
)
BEGIN
    INSERT INTO telefonos VALUES (NULL,NULL,nit,telefono);
	INSERT INTO proveedores VALUES (nit,usuario,nombre,direccion,email);  
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure deleteUser
-- -----------------------------------------------------

USE `PrimalEnterpriceDB`;
DROP procedure IF EXISTS `PrimalEnterpriceDB`.`deleteUser`;

DELIMITER $$
USE `PrimalEnterpriceDB`$$
CREATE PROCEDURE deleteUser(
	IN userName varchar(25)
)
BEGIN
	delete from usuarios
    where usr_usuario = userName;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure decreaceInventory
-- -----------------------------------------------------

USE `PrimalEnterpriceDB`;
DROP procedure IF EXISTS `PrimalEnterpriceDB`.`decreaceInventory`;

DELIMITER $$
USE `PrimalEnterpriceDB`$$
CREATE PROCEDURE decreaceInventory(
	IN Num_items INT,
	IN ID_item INT
)
BEGIN
    DECLARE inventario INT DEFAULT 0;  
    SELECT pru_cantidad
    INTO inventario
    FROM productos
    WHERE pru_id = ID_item;
    IF (inventario - Num_items) >= 0 THEN
    UPDATE productos SET pru_cantidad = (inventario - Num_items)
    WHERE pru_id = ID_item;
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure editUserData
-- -----------------------------------------------------

USE `PrimalEnterpriceDB`;
DROP procedure IF EXISTS `PrimalEnterpriceDB`.`editUserData`;

DELIMITER $$
USE `PrimalEnterpriceDB`$$
CREATE PROCEDURE editUserData(
	IN contrasena_nueva VARCHAR(25),
    IN email VARCHAR(100),
    IN telefono INT,
    IN nombre VARCHAR(80),
    IN usuario_actual VARCHAR(25)
)
BEGIN
	UPDATE usuarios JOIN telefonos
    SET usr_nombre = nombre, usr_contrasena = SHA1(contrasena_nueva), usr_email = email, tel_telefono = telefono
    WHERE usr_usuario = usuario_actual AND tel_usuario = usr_usuario;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure registerActive
-- -----------------------------------------------------

USE `PrimalEnterpriceDB`;
DROP procedure IF EXISTS `PrimalEnterpriceDB`.`registerActive`;

DELIMITER $$
USE `PrimalEnterpriceDB`$$
CREATE PROCEDURE registerActive(
	IN id INT,
    IN usuario VARCHAR(25),
    IN nit INT,
    IN id_factura INT,
    IN descripcion VARCHAR(255),
	IN estado VARCHAR(25),
    IN nombre VARCHAR(80)
)
BEGIN
	INSERT INTO activos
    VALUES(id,usuario,nit,id_factura,estado,nombre,descripcion);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure registerProduct
-- -----------------------------------------------------

USE `PrimalEnterpriceDB`;
DROP procedure IF EXISTS `PrimalEnterpriceDB`.`registerProduct`;

DELIMITER $$
USE `PrimalEnterpriceDB`$$
CREATE PROCEDURE registerProduct(
	IN id INT,
    IN usuario VARCHAR(25),
    IN nit INT,
    IN marca VARCHAR(80),
    IN tipo VARCHAR(20),
    IN cantidad INT,
    IN metodo_almacenamiento VARCHAR(255),
    IN lugar_almacenamiento VARCHAR(255),
    IN fecha_caducidad DATE,
    IN nombre VARCHAR(80),
    IN descripcion VARCHAR(255)
)
BEGIN
	INSERT INTO productos
    VALUES(id,usuario,nit,marca,tipo,cantidad,metodo_almacenamiento,lugar_almacenamiento,nombre,descripcion,fecha_caducidad);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure verifyRepeatedUserData
-- -----------------------------------------------------

USE `PrimalEnterpriceDB`;
DROP procedure IF EXISTS `PrimalEnterpriceDB`.`verifyRepeatedUserData`;

DELIMITER $$
USE `PrimalEnterpriceDB`$$
CREATE PROCEDURE verifyRepeatedUserData(
	IN userName VARCHAR(25),
    IN numCedula INT,
    IN UsrEmail VARCHAR(25)
)
BEGIN
	SELECT *
    FROM vw_getUsers
    WHERE usuario = userName OR cedula = numCedula OR email = usrEmail;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure ActiveInfo
-- -----------------------------------------------------

USE `PrimalEnterpriceDB`;
DROP procedure IF EXISTS `PrimalEnterpriceDB`.`ActiveInfo`;

DELIMITER $$
USE `PrimalEnterpriceDB`$$
CREATE PROCEDURE ActiveInfo(
	IN activeId INT
)
BEGIN
	SELECT nombre,descripcion,estado,fecha_factura AS fecha_compra
    FROM vw_getActives
    WHERE id = activeId;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure productInfo
-- -----------------------------------------------------

USE `PrimalEnterpriceDB`;
DROP procedure IF EXISTS `PrimalEnterpriceDB`.`productInfo`;

DELIMITER $$
USE `PrimalEnterpriceDB`$$
CREATE PROCEDURE productInfo(
	IN productId INT
)
BEGIN
	SELECT nombre,descripcion,tipo,cantidad,metodo_almacenamiento,lugar_almacenamiento,fecha_caducidad,fecha_factura AS fecha_compra
    FROM vw_getProduct WHERE id = productId;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- View `PrimalEnterpriceDB`.`vw_getProductions`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `PrimalEnterpriceDB`.`vw_getProductions`;
DROP VIEW IF EXISTS `PrimalEnterpriceDB`.`vw_getProductions` ;
USE `PrimalEnterpriceDB`;
CREATE  OR REPLACE VIEW vw_getProductions AS SELECT
	prd_id AS id,
    prd_usuario AS usuario,
    prd_estado AS estado,
    prd_fecha_comienzo AS fecha_comienzo,
    prd_fecha_finalizacion AS fecha_finalizacion,
    prd_tipo AS tipo
FROM producciones;

-- -----------------------------------------------------
-- View `PrimalEnterpriceDB`.`vw_getUsers`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `PrimalEnterpriceDB`.`vw_getUsers`;
DROP VIEW IF EXISTS `PrimalEnterpriceDB`.`vw_getUsers` ;
USE `PrimalEnterpriceDB`;
CREATE  OR REPLACE VIEW vw_getUsers AS SELECT 
	usr_usuario AS usuario,
    tel_telefono AS telefono,
    usr_contrasena AS contrasena,
    usr_rango AS rango,
    usr_nombre AS nombre,
	usr_cedula AS cedula,
    usr_email AS email,
    usr_direccion AS direccion
FROM usuarios LEFT JOIN telefonos ON tel_usuario = usr_usuario;

-- -----------------------------------------------------
-- View `PrimalEnterpriceDB`.`vw_getProducts`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `PrimalEnterpriceDB`.`vw_getProducts`;
DROP VIEW IF EXISTS `PrimalEnterpriceDB`.`vw_getProducts` ;
USE `PrimalEnterpriceDB`;
CREATE  OR REPLACE VIEW vw_getProducts AS SELECT
	pru_id AS id,
    pru_usuario AS usuario,
    pru_nit AS nit,
    pve_nombre AS nombre_proveedor,
    pru_nombre AS nombre,
    pru_marca AS marca,
    pru_tipo AS tipo,
    pru_cantidad AS cantidad,
    pru_metodo_almacenamiento AS metodo_almacenaje,
    pru_lugar_almacenamiento AS ubicacion,
    pru_descripcion AS descripcion,
    fac_fecha AS fecha_factura,
    pru_fecha_caducidad AS fecha_caducidad
FROM ((productos LEFT JOIN proveedores ON pru_nit = pve_nit) 
LEFT JOIN producto_factura ON pru_id = pfa_producto_id) LEFT JOIN
facturas ON pfa_factura_id = fac_id;

-- -----------------------------------------------------
-- View `PrimalEnterpriceDB`.`vw_getProviders`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `PrimalEnterpriceDB`.`vw_getProviders`;
DROP VIEW IF EXISTS `PrimalEnterpriceDB`.`vw_getProviders` ;
USE `PrimalEnterpriceDB`;
CREATE  OR REPLACE VIEW vw_getProviders AS SELECT
	pve_nit AS nit,
    tel_telefono AS telefono,
    pve_nombre AS nombre,
    pve_email AS email,
    pve_direccion AS direccion
FROM proveedores INNER JOIN telefonos WHERE tel_proveedor=pve_nit;

-- -----------------------------------------------------
-- View `PrimalEnterpriceDB`.`vw_getActives`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `PrimalEnterpriceDB`.`vw_getActives`;
DROP VIEW IF EXISTS `PrimalEnterpriceDB`.`vw_getActives` ;
USE `PrimalEnterpriceDB`;
CREATE  OR REPLACE VIEW vw_getActives AS SELECT
	act_id AS id,
    act_nit AS nit,
    act_factura_id AS factura,
    act_nombre AS nombre,
    act_estado AS estado,
    act_marca AS marca,
    fac_fecha AS fecha_factura,
    act_descripcion AS descripcion
FROM activos LEFT JOIN facturas ON act_factura_id = fac_id;

-- -----------------------------------------------------
-- View `PrimalEnterpriceDB`.`productLowAmount`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `PrimalEnterpriceDB`.`productLowAmount`;
DROP VIEW IF EXISTS `PrimalEnterpriceDB`.`productLowAmount` ;
USE `PrimalEnterpriceDB`;
CREATE  OR REPLACE VIEW productLowAmount AS 
    SELECT 
        pru_nombre AS nombre,
        pru_cantidad AS cantidad,
        pru_id AS id
    FROM productos WHERE (pru_cantidad <= 5);

-- -----------------------------------------------------
-- View `PrimalEnterpriceDB`.`productsToExpire`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `PrimalEnterpriceDB`.`productsToExpire`;
DROP VIEW IF EXISTS `PrimalEnterpriceDB`.`productsToExpire` ;
USE `PrimalEnterpriceDB`;
CREATE  OR REPLACE VIEW productsToExpire AS 
	SELECT 
		pru_nombre AS nombre,
        pru_id AS id,
        pru_fecha_caducidad AS fecha_caducidad,
        (TO_DAYS(pru_fecha_caducidad) - TO_DAYS(NOW())) AS diff
    FROM productos
    WHERE (((TO_DAYS(pru_fecha_caducidad) - TO_DAYS(NOW())) < 5)
            AND (pru_fecha_caducidad IS NOT NULL))
    ORDER BY (TO_DAYS(pru_fecha_caducidad) - TO_DAYS(NOW()));

SET SQL_MODE = '';
DROP USER IF EXISTS Admin;
SET SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';
CREATE USER 'Admin' IDENTIFIED BY 'HTNT^256FbzNNO6eInk$';

GRANT ALL ON `PrimalEnterpriceDB`.* TO 'Admin';

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
